"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_fpl-api_ts";
exports.ids = ["_rsc_lib_fpl-api_ts"];
exports.modules = {

/***/ "(rsc)/./lib/fpl-api.ts":
/*!************************!*\
  !*** ./lib/fpl-api.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fplApi: () => (/* binding */ fplApi)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\n// League configuration\nconst LEAGUE_ID = 607394; // Ordinary Gentlemen League\nclass FPLApiService {\n    constructor(){\n        this.cache = new Map();\n        this.CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\n        ;\n    }\n    static getInstance() {\n        if (!FPLApiService.instance) {\n            FPLApiService.instance = new FPLApiService();\n        }\n        return FPLApiService.instance;\n    }\n    async makeRequest(endpoint) {\n        // Check if we're in test mode with mock API enabled\n        if (false) {}\n        const cacheKey = endpoint;\n        const cached = this.cache.get(cacheKey);\n        if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\n            return cached.data;\n        }\n        try {\n            // Use Next.js API route to avoid CORS issues\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`/api/fpl?endpoint=${encodeURIComponent(endpoint)}`);\n            this.cache.set(cacheKey, {\n                data: response.data,\n                timestamp: Date.now()\n            });\n            return response.data;\n        } catch (error) {\n            console.error(`FPL API Error for ${endpoint}:`, error);\n            throw error;\n        }\n    }\n    getMockData(endpoint) {\n        console.log(`üß™ Using mock data for endpoint: ${endpoint}`);\n        // Return mock data based on endpoint\n        if (endpoint.includes(\"/leagues-classic/\") && endpoint.includes(\"/standings/\")) {\n            return Promise.resolve({\n                league: {\n                    id: 607394,\n                    name: \"League of Ordinary Gentlemen\",\n                    admin_entry: 607394,\n                    short_name: \"LOG\",\n                    scoring: \"c\"\n                },\n                new_entries: {\n                    results: [\n                        {\n                            id: 1,\n                            entry: 607394,\n                            entry_name: \"Test Admin Team\",\n                            player_first_name: \"Test\",\n                            player_last_name: \"Admin\",\n                            rank: 1,\n                            total: 2000\n                        },\n                        {\n                            id: 2,\n                            entry: 3098228,\n                            entry_name: \"Test User Team\",\n                            player_first_name: \"Test\",\n                            player_last_name: \"User\",\n                            rank: 2,\n                            total: 1900\n                        }\n                    ]\n                }\n            });\n        }\n        if (endpoint === \"/bootstrap-static/\") {\n            return Promise.resolve({\n                events: [\n                    {\n                        id: 1,\n                        name: \"Gameweek 1\",\n                        deadline_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n                        finished: false,\n                        is_current: true\n                    }\n                ],\n                teams: [\n                    {\n                        id: 1,\n                        name: \"Arsenal\",\n                        short_name: \"ARS\"\n                    },\n                    {\n                        id: 2,\n                        name: \"Chelsea\",\n                        short_name: \"CHE\"\n                    },\n                    {\n                        id: 3,\n                        name: \"Liverpool\",\n                        short_name: \"LIV\"\n                    }\n                ],\n                elements: [\n                    {\n                        id: 1,\n                        first_name: \"Mo\",\n                        second_name: \"Salah\",\n                        web_name: \"Salah\",\n                        team: 3\n                    },\n                    {\n                        id: 2,\n                        first_name: \"Erling\",\n                        second_name: \"Haaland\",\n                        web_name: \"Haaland\",\n                        team: 1\n                    }\n                ],\n                chips: [\n                    {\n                        name: \"wildcard\",\n                        start_event: 1,\n                        stop_event: 19\n                    },\n                    {\n                        name: \"bboost\",\n                        start_event: 1,\n                        stop_event: 38\n                    },\n                    {\n                        name: \"3xc\",\n                        start_event: 1,\n                        stop_event: 38\n                    },\n                    {\n                        name: \"freehit\",\n                        start_event: 1,\n                        stop_event: 38\n                    }\n                ]\n            });\n        }\n        if (endpoint === \"/fixtures/\") {\n            return Promise.resolve([\n                {\n                    id: 1,\n                    code: 1234567,\n                    event: 1,\n                    finished: false,\n                    team_a: 1,\n                    team_h: 2,\n                    team_a_score: null,\n                    team_h_score: null\n                }\n            ]);\n        }\n        // Default empty response\n        return Promise.resolve({});\n    }\n    // Get all teams\n    async getTeams() {\n        const data = await this.makeRequest(\"/bootstrap-static/\");\n        return data.teams;\n    }\n    // Get all players\n    async getPlayers() {\n        const data = await this.makeRequest(\"/bootstrap-static/\");\n        return data.elements;\n    }\n    // Get element types (positions)\n    async getElementTypes() {\n        const data = await this.makeRequest(\"/bootstrap-static/\");\n        return data.element_types;\n    }\n    // Get all bootstrap data at once (players, teams, element types)\n    async getBootstrapData() {\n        return await this.makeRequest(\"/bootstrap-static/\");\n    }\n    // Get current gameweek\n    async getCurrentGameweek() {\n        const data = await this.makeRequest(\"/bootstrap-static/\");\n        return data.events.find((event)=>event.is_current) || null;\n    }\n    // Get all gameweeks\n    async getGameweeks() {\n        const data = await this.makeRequest(\"/bootstrap-static/\");\n        return data.events;\n    }\n    // Get fixtures for a specific gameweek\n    async getFixtures(gameweek) {\n        try {\n            console.log(\"\\uD83D\\uDD0D Fetching fixtures from FPL API...\");\n            const fixtures = await this.makeRequest(\"/fixtures/\");\n            console.log(`üìä Found ${fixtures.length} total fixtures`);\n            if (gameweek) {\n                const filteredFixtures = fixtures.filter((fixture)=>fixture.event === gameweek);\n                console.log(`üìä Found ${filteredFixtures.length} fixtures for gameweek ${gameweek}`);\n                return filteredFixtures;\n            }\n            return fixtures;\n        } catch (error) {\n            console.error(\"‚ùå Error fetching fixtures:\", error);\n            return [];\n        }\n    }\n    // Get league standings for a specific league\n    async getLeagueStandings(leagueId) {\n        const targetLeagueId = leagueId || LEAGUE_ID;\n        return await this.makeRequest(`/leagues-classic/${targetLeagueId}/standings/`);\n    }\n    // Get manager FPL ID by email from league standings\n    async getManagerFplIdByEmail(leagueId, email) {\n        try {\n            console.log(`üîç Looking for manager with email: ${email} in league ${leagueId}`);\n            // Get league standings\n            const standings = await this.getLeagueStandings(leagueId);\n            const managers = standings.standings?.results || [];\n            // Look for manager with matching email\n            // Note: FPL API doesn't expose emails directly, so we need to match by other criteria\n            // For now, we'll use a simple approach - you may need to implement a more sophisticated matching\n            // Try to find by common patterns or use a mapping approach\n            // This is a placeholder implementation - you'll need to adjust based on your specific needs\n            console.log(`üìä Found ${managers.length} managers in league`);\n            // For now, return null - you'll need to implement the actual email matching logic\n            // based on how you want to match emails to manager IDs\n            return null;\n        } catch (error) {\n            console.error(\"Error getting manager FPL ID by email:\", error);\n            return null;\n        }\n    }\n    // Get manager's team (requires manager ID)\n    async getManagerTeam(managerId) {\n        return await this.makeRequest(`/entry/${managerId}/`);\n    }\n    // Get manager's team for specific gameweek\n    async getManagerTeamForGameweek(managerId, gameweek) {\n        return await this.makeRequest(`/entry/${managerId}/event/${gameweek}/picks/`);\n    }\n    // Get chip usage for all managers in the league\n    async getChipUsage() {\n        try {\n            // Get league standings to get all manager IDs\n            const leagueData = await this.getLeagueStandings();\n            const managers = leagueData.standings.results || [];\n            const chipUsage = [];\n            const gameweeks = await this.getGameweeks();\n            const finishedGameweeks = gameweeks.filter((gw)=>gw.finished).slice(-6); // Last 6 gameweeks\n            // Process each manager\n            for (const manager of managers.slice(0, 10)){\n                const managerId = manager.entry;\n                const managerName = `${manager.player_first_name} ${manager.player_last_name}`;\n                const teamName = manager.entry_name;\n                // Check each finished gameweek for chip usage\n                for (const gameweek of finishedGameweeks){\n                    try {\n                        const teamData = await this.getManagerTeamForGameweek(managerId, gameweek.id);\n                        if (teamData && teamData.active_chip) {\n                            const chipType = teamData.active_chip;\n                            const chipName = this.getChipDisplayName(chipType, gameweek.id);\n                            chipUsage.push({\n                                managerId,\n                                managerName,\n                                teamName,\n                                gameweek: gameweek.id,\n                                chipType,\n                                chipName,\n                                points: teamData.entry_history?.points || 0,\n                                rank: manager.rank\n                            });\n                        }\n                    } catch (error) {\n                        console.warn(`Failed to get team data for manager ${managerId} in GW ${gameweek.id}:`, error);\n                    }\n                }\n            }\n            return chipUsage;\n        } catch (error) {\n            console.error(\"Error fetching chip usage:\", error);\n            throw error;\n        }\n    }\n    // Get chip winners for each chip type\n    async getChipWinners() {\n        try {\n            const chipUsage = await this.getChipUsage();\n            const chipWinners = {};\n            // Group chip usage by chip type\n            const chipUsageByType = {};\n            chipUsage.forEach((usage)=>{\n                if (!chipUsageByType[usage.chipType]) {\n                    chipUsageByType[usage.chipType] = [];\n                }\n                chipUsageByType[usage.chipType].push(usage);\n            });\n            // For each chip type, find the winner(s) with highest points\n            for (const [chipType, usages] of Object.entries(chipUsageByType)){\n                if (!chipWinners[chipType]) {\n                    chipWinners[chipType] = [];\n                }\n                // Group by gameweek to handle multiple gameweeks\n                const usageByGameweek = {};\n                usages.forEach((usage)=>{\n                    if (!usageByGameweek[usage.gameweek]) {\n                        usageByGameweek[usage.gameweek] = [];\n                    }\n                    usageByGameweek[usage.gameweek].push(usage);\n                });\n                // Find winners for each gameweek\n                for (const [gameweek, gameweekUsages] of Object.entries(usageByGameweek)){\n                    const maxPoints = Math.max(...gameweekUsages.map((u)=>u.points));\n                    const winners = gameweekUsages.filter((u)=>u.points === maxPoints);\n                    winners.forEach((winner)=>{\n                        chipWinners[chipType].push({\n                            gameweek: winner.gameweek,\n                            managerId: winner.managerId,\n                            managerName: winner.managerName,\n                            points: winner.points,\n                            chipName: winner.chipName\n                        });\n                    });\n                }\n            }\n            return chipWinners;\n        } catch (error) {\n            console.error(\"Error getting chip winners:\", error);\n            throw error;\n        }\n    }\n    // Fetch and store match data for a specific gameweek\n    async fetchAndStoreMatchData(gameweek) {\n        try {\n            console.log(`üîç Fetching match data for gameweek ${gameweek}...`);\n            // Fetch fixtures for the gameweek\n            const fixtures = await this.getFixtures(gameweek);\n            if (fixtures.length === 0) {\n                console.log(`‚ö†Ô∏è No fixtures found for gameweek ${gameweek}`);\n                return [];\n            }\n            // Fetch bootstrap data for team and player mapping\n            const bootstrapData = await this.getBootstrapData();\n            const teamMap = new Map(bootstrapData.teams.map((team)=>[\n                    team.id,\n                    team.name\n                ]));\n            const playerMap = new Map(bootstrapData.elements.map((player)=>[\n                    player.id,\n                    player.web_name\n                ]));\n            const matchDataArray = [];\n            for (const fixture of fixtures){\n                const matchData = this.processFixtureData(fixture, teamMap, playerMap);\n                if (matchData) {\n                    matchDataArray.push(matchData);\n                }\n            }\n            console.log(`‚úÖ Processed ${matchDataArray.length} matches for gameweek ${gameweek}`);\n            return matchDataArray;\n        } catch (error) {\n            console.error(`‚ùå Error fetching match data for gameweek ${gameweek}:`, error);\n            throw error;\n        }\n    }\n    // Process individual fixture data\n    processFixtureData(fixture, teamMap, playerMap) {\n        try {\n            const homeTeamName = teamMap.get(fixture.team_h) || `Team ${fixture.team_h}`;\n            const awayTeamName = teamMap.get(fixture.team_a) || `Team ${fixture.team_a}`;\n            // Create match result\n            const matchResult = {\n                fixtureId: fixture.id,\n                gameweek: fixture.event,\n                homeTeamId: fixture.team_h,\n                awayTeamId: fixture.team_a,\n                homeTeamName,\n                awayTeamName,\n                homeScore: fixture.team_h_score || 0,\n                awayScore: fixture.team_a_score || 0,\n                kickoffTime: fixture.kickoff_time,\n                finished: fixture.finished,\n                started: fixture.started,\n                lastUpdated: new Date()\n            };\n            // Extract goalscorers from stats\n            const goalscorers = [];\n            const goalsScored = fixture.stats?.find((stat)=>stat.identifier === \"goals_scored\");\n            if (goalsScored) {\n                // Process home team goalscorers\n                if (goalsScored.h) {\n                    for (const playerStat of goalsScored.h){\n                        const playerName = playerMap.get(playerStat.element) || `Player ${playerStat.element}`;\n                        goalscorers.push({\n                            matchResultId: 0,\n                            playerId: playerStat.element,\n                            playerName,\n                            teamId: fixture.team_h,\n                            teamName: homeTeamName,\n                            goals: playerStat.value,\n                            isHomeTeam: true\n                        });\n                    }\n                }\n                // Process away team goalscorers\n                if (goalsScored.a) {\n                    for (const playerStat of goalsScored.a){\n                        const playerName = playerMap.get(playerStat.element) || `Player ${playerStat.element}`;\n                        goalscorers.push({\n                            matchResultId: 0,\n                            playerId: playerStat.element,\n                            playerName,\n                            teamId: fixture.team_a,\n                            teamName: awayTeamName,\n                            goals: playerStat.value,\n                            isHomeTeam: false\n                        });\n                    }\n                }\n            }\n            return {\n                matchResult,\n                goalscorers\n            };\n        } catch (error) {\n            console.error(`‚ùå Error processing fixture ${fixture.id}:`, error);\n            return null;\n        }\n    }\n    // Get match data for a specific gameweek (from database)\n    async getMatchDataForGameweek(gameweek) {\n        try {\n            const { dbUtils } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/dexie\"), __webpack_require__.e(\"_rsc_lib_database_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./database */ \"(rsc)/./lib/database.ts\"));\n            const matchResults = await dbUtils.getMatchResultsByGameweek(gameweek);\n            const matchDataArray = [];\n            for (const matchResult of matchResults){\n                const goalscorers = await dbUtils.getGoalscorersByMatch(matchResult.id);\n                matchDataArray.push({\n                    matchResult,\n                    goalscorers\n                });\n            }\n            return matchDataArray;\n        } catch (error) {\n            console.error(`‚ùå Error getting match data for gameweek ${gameweek}:`, error);\n            throw error;\n        }\n    }\n    // Store match data in database\n    async storeMatchData(matchDataArray) {\n        try {\n            const { dbUtils } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/dexie\"), __webpack_require__.e(\"_rsc_lib_database_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./database */ \"(rsc)/./lib/database.ts\"));\n            for (const matchData of matchDataArray){\n                await dbUtils.saveMatchData(matchData);\n            }\n            console.log(`‚úÖ Stored ${matchDataArray.length} match records in database`);\n        } catch (error) {\n            console.error(\"‚ùå Error storing match data:\", error);\n            throw error;\n        }\n    }\n    // Complete workflow: fetch, process, and store match data\n    async fetchProcessAndStoreMatchData(gameweek) {\n        try {\n            console.log(`üöÄ Starting complete workflow for gameweek ${gameweek}...`);\n            // Fetch and process match data\n            const matchDataArray = await this.fetchAndStoreMatchData(gameweek);\n            if (matchDataArray.length > 0) {\n                // Store in database\n                await this.storeMatchData(matchDataArray);\n                console.log(`‚úÖ Successfully processed and stored match data for gameweek ${gameweek}`);\n            } else {\n                console.log(`‚ö†Ô∏è No match data to store for gameweek ${gameweek}`);\n            }\n        } catch (error) {\n            console.error(`‚ùå Error in complete workflow for gameweek ${gameweek}:`, error);\n            throw error;\n        }\n    }\n    // Helper method to get chip display name\n    getChipDisplayName(chipType, gameweek) {\n        const chipNames = {\n            \"bboost\": \"Bench Boost\",\n            \"freehit\": \"Free Hit\",\n            \"wildcard\": \"Wildcard\",\n            \"3xc\": \"Triple Captain\"\n        };\n        const baseName = chipNames[chipType] || chipType;\n        return `${baseName} ${gameweek <= 19 ? \"I\" : \"II\"}`;\n    }\n    // Get league ID\n    getLeagueId() {\n        return LEAGUE_ID;\n    }\n    // Clear cache\n    clearCache() {\n        this.cache.clear();\n    }\n}\nconst fplApi = FPLApiService.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/fpl-api.ts\n");

/***/ })

};
;