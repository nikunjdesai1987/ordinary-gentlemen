"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_database_ts";
exports.ids = ["_rsc_lib_database_ts"];
exports.modules = {

/***/ "(rsc)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   dbUtils: () => (/* binding */ dbUtils)\n/* harmony export */ });\n/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ \"(rsc)/./node_modules/dexie/dist/modern/dexie.mjs\");\n\nclass FPLDatabase extends dexie__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(){\n        super(\"FPLDatabase\");\n        this.version(10).stores({\n            users: \"++id, uid, email\",\n            predictions: \"++id, userId, gameweek, [userId+gameweek], submittedAt\",\n            gameweekSummaries: \"++id, gameweek, isActive\",\n            leagueStandings: \"++id, userId, gameweek, [userId+gameweek], rank\",\n            scoreStrikeEntries: \"++id, fplleague_id, manager_email, manager_fplid, manager_scrname, fixture_id, gameweek, [manager_email+fixture_id+gameweek], submitted_timestamp\",\n            scoreStrikePots: \"++id, fplleague_id, gameweek, is_active, [fplleague_id+gameweek]\",\n            scoreStrikeWinners: \"++id, fplleague_id, gameweek, fixture_id, manager_email, [fplleague_id+gameweek]\",\n            adminConfigs: \"++id, adminId, timestamp, isConfirmed, leagueId, updatedAt\",\n            leagueInfos: \"++id, leagueId, leagueName, leagueAdmin, adminId, isCreated, createdAt, updatedAt\",\n            matchResults: \"++id, fixtureId, gameweek, homeTeamId, awayTeamId, [gameweek+fixtureId]\",\n            goalscorers: \"++id, matchResultId, playerId, teamId\"\n        });\n    }\n}\nconst db = new FPLDatabase();\n// Database utility functions\nconst dbUtils = {\n    // User operations\n    async saveUser (user) {\n        const existingUser = await db.users.where(\"uid\").equals(user.uid).first();\n        if (existingUser) {\n            return await db.users.update(existingUser.id, {\n                ...user,\n                updatedAt: new Date()\n            });\n        }\n        return await db.users.add(user);\n    },\n    async getUser (uid) {\n        return await db.users.where(\"uid\").equals(uid).first();\n    },\n    // Prediction operations\n    async savePrediction (prediction) {\n        return await db.predictions.add(prediction);\n    },\n    async getPredictionsByUser (userId, gameweek) {\n        if (gameweek) {\n            return await db.predictions.where(\"[userId+gameweek]\").equals([\n                userId,\n                gameweek\n            ]).toArray();\n        }\n        return await db.predictions.where(\"userId\").equals(userId).toArray();\n    },\n    async getPredictionsByGameweek (gameweek) {\n        return await db.predictions.where(\"gameweek\").equals(gameweek).toArray();\n    },\n    // Gameweek operations\n    async saveGameweekSummary (summary) {\n        const existing = await db.gameweekSummaries.where(\"gameweek\").equals(summary.gameweek).first();\n        if (existing) {\n            return await db.gameweekSummaries.update(existing.id, summary);\n        }\n        return await db.gameweekSummaries.add(summary);\n    },\n    async getActiveGameweek () {\n        return await db.gameweekSummaries.filter((gameweek)=>gameweek.isActive).first();\n    },\n    // League standings operations\n    async saveLeagueStanding (standing) {\n        const existing = await db.leagueStandings.where(\"[userId+gameweek]\").equals([\n            standing.userId,\n            standing.gameweek\n        ]).first();\n        if (existing) {\n            return await db.leagueStandings.update(existing.id, standing);\n        }\n        return await db.leagueStandings.add(standing);\n    },\n    async getLeagueStandings (gameweek) {\n        if (gameweek) {\n            return await db.leagueStandings.where(\"gameweek\").equals(gameweek).toArray();\n        }\n        return await db.leagueStandings.toArray();\n    },\n    // Score and Strike Entries operations\n    async saveScoreStrikeEntry (entry) {\n        // Check if there's an existing entry for this manager, fixture, and gameweek\n        const existingEntry = await db.scoreStrikeEntries.where([\n            \"manager_email\",\n            \"fixture_id\",\n            \"gameweek\"\n        ]).equals([\n            entry.manager_email,\n            entry.fixture_id,\n            entry.gameweek\n        ]).first();\n        if (existingEntry) {\n            // Update existing entry (only most recent entry is kept)\n            return await db.scoreStrikeEntries.update(existingEntry.id, {\n                ...entry,\n                submitted_timestamp: new Date()\n            });\n        }\n        // Add new entry\n        return await db.scoreStrikeEntries.add(entry);\n    },\n    async getScoreStrikeEntriesByManager (manager_email) {\n        return await db.scoreStrikeEntries.where(\"manager_email\").equals(manager_email).toArray();\n    },\n    async getScoreStrikeEntriesByLeague (fplleague_id) {\n        return await db.scoreStrikeEntries.where(\"fplleague_id\").equals(fplleague_id).toArray();\n    },\n    async getScoreStrikeEntriesByManagerAndLeague (manager_email, fplleague_id) {\n        return await db.scoreStrikeEntries.where([\n            \"manager_email\",\n            \"fplleague_id\"\n        ]).equals([\n            manager_email,\n            fplleague_id\n        ]).toArray();\n    },\n    async getScoreStrikeEntriesByFixture (fixture_id, gameweek) {\n        return await db.scoreStrikeEntries.where([\n            \"fixture_id\",\n            \"gameweek\"\n        ]).equals([\n            fixture_id,\n            gameweek\n        ]).toArray();\n    },\n    async getScoreStrikeEntryByManagerAndFixture (manager_email, fixture_id, gameweek) {\n        return await db.scoreStrikeEntries.where([\n            \"manager_email\",\n            \"fixture_id\",\n            \"gameweek\"\n        ]).equals([\n            manager_email,\n            fixture_id,\n            gameweek\n        ]).first();\n    },\n    async getAllScoreStrikeEntries () {\n        return await db.scoreStrikeEntries.toArray();\n    },\n    // Score and Strike Pot operations\n    async saveScoreStrikePot (pot) {\n        const existingPot = await db.scoreStrikePots.where([\n            \"fplleague_id\",\n            \"gameweek\"\n        ]).equals([\n            pot.fplleague_id,\n            pot.gameweek\n        ]).first();\n        if (existingPot) {\n            return await db.scoreStrikePots.update(existingPot.id, {\n                ...pot,\n                updated_at: new Date()\n            });\n        }\n        return await db.scoreStrikePots.add(pot);\n    },\n    async getScoreStrikePot (fplleague_id, gameweek) {\n        return await db.scoreStrikePots.where([\n            \"fplleague_id\",\n            \"gameweek\"\n        ]).equals([\n            fplleague_id,\n            gameweek\n        ]).first();\n    },\n    async getCurrentScoreStrikePot (fplleague_id) {\n        return await db.scoreStrikePots.where(\"fplleague_id\").equals(fplleague_id).filter((pot)=>pot.is_active).first();\n    },\n    // Score and Strike Winner operations\n    async saveScoreStrikeWinner (winner) {\n        return await db.scoreStrikeWinners.add(winner);\n    },\n    async getScoreStrikeWinnersByGameweek (fplleague_id, gameweek) {\n        return await db.scoreStrikeWinners.where([\n            \"fplleague_id\",\n            \"gameweek\"\n        ]).equals([\n            fplleague_id,\n            gameweek\n        ]).toArray();\n    },\n    async getScoreStrikeWinnersByFixture (fixture_id, gameweek) {\n        return await db.scoreStrikeWinners.where([\n            \"fixture_id\",\n            \"gameweek\"\n        ]).equals([\n            fixture_id,\n            gameweek\n        ]).toArray();\n    },\n    // Get all Score and Strike winners for a specific gameweek with pot distribution\n    async getScoreStrikeWinnersByGameweekWithPotDistribution (fplleague_id, gameweek) {\n        try {\n            // Get all winners for this gameweek\n            const winners = await this.getScoreStrikeWinnersByGameweek(fplleague_id, gameweek);\n            if (winners.length === 0) {\n                return {\n                    winners: [],\n                    totalWinners: 0,\n                    potAmount: 0,\n                    amountPerWinner: 0\n                };\n            }\n            // Get the pot amount for this gameweek\n            const pot = await this.getScoreStrikePot(fplleague_id, gameweek);\n            const potAmount = pot?.current_amount || 0;\n            // Calculate amount per winner (pot divided by number of winners)\n            const totalWinners = winners.length;\n            const amountPerWinner = totalWinners > 0 ? potAmount / totalWinners : 0;\n            return {\n                winners,\n                totalWinners,\n                potAmount,\n                amountPerWinner\n            };\n        } catch (error) {\n            console.error(\"Error getting Score and Strike winners with pot distribution:\", error);\n            return {\n                winners: [],\n                totalWinners: 0,\n                potAmount: 0,\n                amountPerWinner: 0\n            };\n        }\n    },\n    // Admin Configuration operations\n    async saveAdminConfig (config) {\n        return await db.adminConfigs.add(config);\n    },\n    async getLatestAdminConfig () {\n        return await db.adminConfigs.orderBy(\"timestamp\").reverse().first();\n    },\n    async getAdminConfigsByAdmin (adminId) {\n        const configs = await db.adminConfigs.where(\"adminId\").equals(adminId).toArray();\n        return configs.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    },\n    async getAllAdminConfigs () {\n        const configs = await db.adminConfigs.toArray();\n        return configs.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    },\n    // League Info operations\n    async saveLeagueInfo (leagueInfo) {\n        const existingLeague = await db.leagueInfos.where(\"leagueId\").equals(leagueInfo.leagueId).first();\n        if (existingLeague) {\n            return await db.leagueInfos.update(existingLeague.id, {\n                ...leagueInfo,\n                updatedAt: new Date()\n            });\n        }\n        return await db.leagueInfos.add(leagueInfo);\n    },\n    async getLeagueInfo (leagueId) {\n        return await db.leagueInfos.where(\"leagueId\").equals(leagueId).first();\n    },\n    async getAllLeagueInfos () {\n        const leagues = await db.leagueInfos.toArray();\n        return leagues.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    },\n    async getCreatedLeagues () {\n        return await db.leagueInfos.filter((league)=>league.isCreated).toArray();\n    },\n    async updateLeagueCreatedStatus (leagueId, isCreated) {\n        const league = await db.leagueInfos.where(\"leagueId\").equals(leagueId).first();\n        if (league) {\n            await db.leagueInfos.update(league.id, {\n                isCreated,\n                updatedAt: new Date()\n            });\n        }\n    },\n    // Match Result operations\n    async saveMatchResult (matchResult) {\n        const existing = await db.matchResults.where(\"[gameweek+fixtureId]\").equals([\n            matchResult.gameweek,\n            matchResult.fixtureId\n        ]).first();\n        if (existing) {\n            return await db.matchResults.update(existing.id, {\n                ...matchResult,\n                lastUpdated: new Date()\n            });\n        }\n        return await db.matchResults.add(matchResult);\n    },\n    async getMatchResultsByGameweek (gameweek) {\n        return await db.matchResults.where(\"gameweek\").equals(gameweek).toArray();\n    },\n    async getMatchResultByFixture (fixtureId) {\n        return await db.matchResults.where(\"fixtureId\").equals(fixtureId).first();\n    },\n    async getAllMatchResults () {\n        return await db.matchResults.toArray();\n    },\n    // Goalscorer operations\n    async saveGoalscorer (goalscorer) {\n        return await db.goalscorers.add(goalscorer);\n    },\n    async getGoalscorersByMatch (matchResultId) {\n        return await db.goalscorers.where(\"matchResultId\").equals(matchResultId).toArray();\n    },\n    async getGoalscorersByGameweek (gameweek) {\n        const matchResults = await this.getMatchResultsByGameweek(gameweek);\n        const matchIds = matchResults.map((match)=>match.id);\n        return await db.goalscorers.where(\"matchResultId\").anyOf(matchIds).toArray();\n    },\n    async saveMatchData (matchData) {\n        // Save match result first\n        const matchResultId = await this.saveMatchResult(matchData.matchResult);\n        // Save goalscorers\n        const goalscorerIds = [];\n        for (const goalscorer of matchData.goalscorers){\n            goalscorer.matchResultId = matchResultId;\n            const goalscorerId = await this.saveGoalscorer(goalscorer);\n            goalscorerIds.push(goalscorerId);\n        }\n        return {\n            matchResultId,\n            goalscorerIds\n        };\n    },\n    // Utility functions\n    async clearOldData (olderThanDays = 30) {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n        await db.predictions.where(\"submittedAt\").below(cutoffDate).delete();\n    },\n    // Function to clear all database data (useful for version conflicts)\n    async clearAllData () {\n        console.log(\"\\uD83D\\uDDD1️ Clearing all database data...\");\n        try {\n            await db.transaction(\"rw\", [\n                db.users,\n                db.predictions,\n                db.gameweekSummaries,\n                db.leagueStandings,\n                db.scoreStrikeEntries,\n                db.scoreStrikePots,\n                db.scoreStrikeWinners,\n                db.adminConfigs,\n                db.leagueInfos,\n                db.matchResults,\n                db.goalscorers\n            ], async ()=>{\n                await db.users.clear();\n                await db.predictions.clear();\n                await db.gameweekSummaries.clear();\n                await db.leagueStandings.clear();\n                await db.scoreStrikeEntries.clear();\n                await db.scoreStrikePots.clear();\n                await db.scoreStrikeWinners.clear();\n                await db.adminConfigs.clear();\n                await db.leagueInfos.clear();\n                await db.matchResults.clear();\n                await db.goalscorers.clear();\n            });\n            console.log(\"✅ Database data cleared successfully\");\n        } catch (error) {\n            console.error(\"❌ Error clearing database data:\", error);\n            throw error;\n        }\n    },\n    // Function to delete the entire database (nuclear option for version conflicts)\n    async deleteDatabase () {\n        console.log(\"\\uD83D\\uDCA5 Deleting entire database...\");\n        try {\n            await db.delete();\n            console.log(\"✅ Database deleted successfully\");\n        } catch (error) {\n            console.error(\"❌ Error deleting database:\", error);\n            throw error;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database.ts\n");

/***/ })

};
;